{"ast":null,"code":"// import { useCallback, useState, useEffect } from \"react\";\n\n// function ComponentMapHooks() {\n//   // Pannning Variables\n//   const [pos, setPos] = useState({ x: 0, y: 0 });\n//   const [delta, setDelta] = useState({ x: 0, y: 0 });\n//   const [isDragging, setIsDragging] = useState(false);\n\n//   // Zooming Variables\n//   const [scale, setScale] = useState(1);\n//   const minZoom = 0.5;\n//   const maxZoom = 3;\n\n//   // SVG PANNING -----------------------------------------------------------------------------------------------------------------------------\n//   // Sets the newX and newY const variables. Also allows for dragging.\n//   const handleMouseDown = (e) => {\n//     setDelta({\n//       x: e.clientX - pos.x,\n//       y: e.clientY - pos.y,\n//     });\n\n//     setIsDragging(true);\n//   };\n\n//   // While the mouse is held down it will constantly update the newX and newY to the difference of the mouse pos and delta pos.\n//   const handleMouseMove = useCallback(\n//     (e) => {\n//       if (isDragging === true) {\n//         const newX = e.clientX - delta.x;\n//         const newY = e.clientY - delta.y;\n\n//         setPos({ x: newX, y: newY });\n//       }\n//     },\n//     [isDragging, delta.x, delta.y]\n//   );\n\n//   // When the mouse button is let up it stops the dragging.\n//   const handleMouseUp = (e) => {\n//     setTimeout(() => {\n//       setIsDragging(false);\n//     }, 0);\n//   };\n\n//   // Needed for window mouse events to ensure its smooth when moving.\n//   // Use effect will run once every time the page loads. Then it will re run if the hook isDragging changes.\n//   useEffect(() => {\n//     window.addEventListener(\"mousemove\", handleMouseMove);\n//     window.addEventListener(\"mouseup\", handleMouseUp);\n\n//     return () => {\n//       window.removeEventListener(\"mousemove\", handleMouseMove);\n//       window.removeEventListener(\"mouseup\", handleMouseUp);\n//     };\n//   }, [isDragging, handleMouseMove]); // Re-run the effect if isDragging changes\n//   //------------------------------------------------------------------------------------------------------------------------------------------\n\n//   // SVG ZOOMING -----------------------------------------------------------------------------------------------------------------------------\n//   // Negative Delta Y is zooming in and opposite for positive Delta Y\n//   const handleWheel = (e) => {\n//     let newScale = scale;\n//     if (e.deltaY < 0) {\n//       // Zoom in\n//       newScale = Math.min(scale * 1.1, maxZoom);\n//     } else {\n//       // Zoom out\n//       newScale = Math.max(scale * 0.9, minZoom);\n//     }\n\n//     setScale(newScale);\n//   };\n//   //------------------------------------------------------------------------------------------------------------------------------------------\n// }\n\n// export default ComponentMapHooks;","map":{"version":3,"names":[],"sources":["C:/Users/gipjonat/Desktop/Coding/Projects/AMZL/partsmap/Client/src/Components/Component-Map/Map-Hooks.jsx"],"sourcesContent":["// import { useCallback, useState, useEffect } from \"react\";\r\n\r\n// function ComponentMapHooks() {\r\n//   // Pannning Variables\r\n//   const [pos, setPos] = useState({ x: 0, y: 0 });\r\n//   const [delta, setDelta] = useState({ x: 0, y: 0 });\r\n//   const [isDragging, setIsDragging] = useState(false);\r\n\r\n//   // Zooming Variables\r\n//   const [scale, setScale] = useState(1);\r\n//   const minZoom = 0.5;\r\n//   const maxZoom = 3;\r\n\r\n//   // SVG PANNING -----------------------------------------------------------------------------------------------------------------------------\r\n//   // Sets the newX and newY const variables. Also allows for dragging.\r\n//   const handleMouseDown = (e) => {\r\n//     setDelta({\r\n//       x: e.clientX - pos.x,\r\n//       y: e.clientY - pos.y,\r\n//     });\r\n\r\n//     setIsDragging(true);\r\n//   };\r\n\r\n//   // While the mouse is held down it will constantly update the newX and newY to the difference of the mouse pos and delta pos.\r\n//   const handleMouseMove = useCallback(\r\n//     (e) => {\r\n//       if (isDragging === true) {\r\n//         const newX = e.clientX - delta.x;\r\n//         const newY = e.clientY - delta.y;\r\n\r\n//         setPos({ x: newX, y: newY });\r\n//       }\r\n//     },\r\n//     [isDragging, delta.x, delta.y]\r\n//   );\r\n\r\n//   // When the mouse button is let up it stops the dragging.\r\n//   const handleMouseUp = (e) => {\r\n//     setTimeout(() => {\r\n//       setIsDragging(false);\r\n//     }, 0);\r\n//   };\r\n\r\n//   // Needed for window mouse events to ensure its smooth when moving.\r\n//   // Use effect will run once every time the page loads. Then it will re run if the hook isDragging changes.\r\n//   useEffect(() => {\r\n//     window.addEventListener(\"mousemove\", handleMouseMove);\r\n//     window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n//     return () => {\r\n//       window.removeEventListener(\"mousemove\", handleMouseMove);\r\n//       window.removeEventListener(\"mouseup\", handleMouseUp);\r\n//     };\r\n//   }, [isDragging, handleMouseMove]); // Re-run the effect if isDragging changes\r\n//   //------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n//   // SVG ZOOMING -----------------------------------------------------------------------------------------------------------------------------\r\n//   // Negative Delta Y is zooming in and opposite for positive Delta Y\r\n//   const handleWheel = (e) => {\r\n//     let newScale = scale;\r\n//     if (e.deltaY < 0) {\r\n//       // Zoom in\r\n//       newScale = Math.min(scale * 1.1, maxZoom);\r\n//     } else {\r\n//       // Zoom out\r\n//       newScale = Math.max(scale * 0.9, minZoom);\r\n//     }\r\n\r\n//     setScale(newScale);\r\n//   };\r\n//   //------------------------------------------------------------------------------------------------------------------------------------------\r\n// }\r\n\r\n// export default ComponentMapHooks;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}