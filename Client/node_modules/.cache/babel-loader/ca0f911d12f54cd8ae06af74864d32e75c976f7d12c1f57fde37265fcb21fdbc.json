{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState, useEffect } from \"react\";\nfunction ComponentMapHooks() {\n  _s();\n  // Pannning Variables\n  const [pos, setPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [delta, setDelta] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n\n  // Zooming Variables\n  const [scale, setScale] = useState(1);\n  const minZoom = 0.5;\n  const maxZoom = 3;\n\n  // SVG PANNING -----------------------------------------------------------------------------------------------------------------------------\n  // Sets the newX and newY const variables. Also allows for dragging.\n  const handleMouseDown = e => {\n    setDelta({\n      x: e.clientX - pos.x,\n      y: e.clientY - pos.y\n    });\n    setIsDragging(true);\n  };\n\n  // While the mouse is held down it will constantly update the newX and newY to the difference of the mouse pos and delta pos.\n  const handleMouseMove = useCallback(e => {\n    if (isDragging === true) {\n      const newX = e.clientX - delta.x;\n      const newY = e.clientY - delta.y;\n      setPos({\n        x: newX,\n        y: newY\n      });\n    }\n  }, [isDragging, delta.x, delta.y]);\n\n  // When the mouse button is let up it stops the dragging.\n  const handleMouseUp = e => {\n    setTimeout(() => {\n      setIsDragging(false);\n    }, 0);\n  };\n\n  // Needed for window mouse events to ensure its smooth when moving.\n  // Use effect will run once every time the page loads. Then it will re run if the hook isDragging changes.\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [isDragging, handleMouseMove]); // Re-run the effect if isDragging changes\n  //------------------------------------------------------------------------------------------------------------------------------------------\n\n  // SVG ZOOMING -----------------------------------------------------------------------------------------------------------------------------\n  // Negative Delta Y is zooming in and opposite for positive Delta Y\n  const handleWheel = e => {\n    let newScale = scale;\n    if (e.deltaY < 0) {\n      // Zoom in\n      newScale = Math.min(scale * 1.1, maxZoom);\n    } else {\n      // Zoom out\n      newScale = Math.max(scale * 0.9, minZoom);\n    }\n    setScale(newScale);\n  };\n  //------------------------------------------------------------------------------------------------------------------------------------------\n}\n_s(ComponentMapHooks, \"XF1/mxKTJ5gzMLX4lnxC3by2pUU=\");\n_c = ComponentMapHooks;\nexport default ComponentMapHooks;\nvar _c;\n$RefreshReg$(_c, \"ComponentMapHooks\");","map":{"version":3,"names":["useCallback","useState","useEffect","ComponentMapHooks","_s","pos","setPos","x","y","delta","setDelta","isDragging","setIsDragging","scale","setScale","minZoom","maxZoom","handleMouseDown","e","clientX","clientY","handleMouseMove","newX","newY","handleMouseUp","setTimeout","window","addEventListener","removeEventListener","handleWheel","newScale","deltaY","Math","min","max","_c","$RefreshReg$"],"sources":["C:/Users/gipjonat/Desktop/Coding/Projects/AMZL/partsmap/Client/src/Components/Component-Map/Map-Hooks.jsx"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\r\n\r\nfunction ComponentMapHooks() {\r\n  // Pannning Variables\r\n  const [pos, setPos] = useState({ x: 0, y: 0 });\r\n  const [delta, setDelta] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n\r\n  // Zooming Variables\r\n  const [scale, setScale] = useState(1);\r\n  const minZoom = 0.5;\r\n  const maxZoom = 3;\r\n\r\n  // SVG PANNING -----------------------------------------------------------------------------------------------------------------------------\r\n  // Sets the newX and newY const variables. Also allows for dragging.\r\n  const handleMouseDown = (e) => {\r\n    setDelta({\r\n      x: e.clientX - pos.x,\r\n      y: e.clientY - pos.y,\r\n    });\r\n\r\n    setIsDragging(true);\r\n  };\r\n\r\n  // While the mouse is held down it will constantly update the newX and newY to the difference of the mouse pos and delta pos.\r\n  const handleMouseMove = useCallback(\r\n    (e) => {\r\n      if (isDragging === true) {\r\n        const newX = e.clientX - delta.x;\r\n        const newY = e.clientY - delta.y;\r\n\r\n        setPos({ x: newX, y: newY });\r\n      }\r\n    },\r\n    [isDragging, delta.x, delta.y]\r\n  );\r\n\r\n  // When the mouse button is let up it stops the dragging.\r\n  const handleMouseUp = (e) => {\r\n    setTimeout(() => {\r\n      setIsDragging(false);\r\n    }, 0);\r\n  };\r\n\r\n  // Needed for window mouse events to ensure its smooth when moving.\r\n  // Use effect will run once every time the page loads. Then it will re run if the hook isDragging changes.\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, [isDragging, handleMouseMove]); // Re-run the effect if isDragging changes\r\n  //------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  // SVG ZOOMING -----------------------------------------------------------------------------------------------------------------------------\r\n  // Negative Delta Y is zooming in and opposite for positive Delta Y\r\n  const handleWheel = (e) => {\r\n    let newScale = scale;\r\n    if (e.deltaY < 0) {\r\n      // Zoom in\r\n      newScale = Math.min(scale * 1.1, maxZoom);\r\n    } else {\r\n      // Zoom out\r\n      newScale = Math.max(scale * 0.9, minZoom);\r\n    }\r\n\r\n    setScale(newScale);\r\n  };\r\n  //------------------------------------------------------------------------------------------------------------------------------------------\r\n}\r\n\r\nexport default ComponentMapHooks;\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAExD,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGL,QAAQ,CAAC;IAAEM,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAC9C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IAAEM,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAClD,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMc,OAAO,GAAG,GAAG;EACnB,MAAMC,OAAO,GAAG,CAAC;;EAEjB;EACA;EACA,MAAMC,eAAe,GAAIC,CAAC,IAAK;IAC7BR,QAAQ,CAAC;MACPH,CAAC,EAAEW,CAAC,CAACC,OAAO,GAAGd,GAAG,CAACE,CAAC;MACpBC,CAAC,EAAEU,CAAC,CAACE,OAAO,GAAGf,GAAG,CAACG;IACrB,CAAC,CAAC;IAEFI,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMS,eAAe,GAAGrB,WAAW,CAChCkB,CAAC,IAAK;IACL,IAAIP,UAAU,KAAK,IAAI,EAAE;MACvB,MAAMW,IAAI,GAAGJ,CAAC,CAACC,OAAO,GAAGV,KAAK,CAACF,CAAC;MAChC,MAAMgB,IAAI,GAAGL,CAAC,CAACE,OAAO,GAAGX,KAAK,CAACD,CAAC;MAEhCF,MAAM,CAAC;QAAEC,CAAC,EAAEe,IAAI;QAAEd,CAAC,EAAEe;MAAK,CAAC,CAAC;IAC9B;EACF,CAAC,EACD,CAACZ,UAAU,EAAEF,KAAK,CAACF,CAAC,EAAEE,KAAK,CAACD,CAAC,CAC/B,CAAC;;EAED;EACA,MAAMgB,aAAa,GAAIN,CAAC,IAAK;IAC3BO,UAAU,CAAC,MAAM;MACfb,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;;EAED;EACA;EACAV,SAAS,CAAC,MAAM;IACdwB,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEN,eAAe,CAAC;IACrDK,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEH,aAAa,CAAC;IAEjD,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,WAAW,EAAEP,eAAe,CAAC;MACxDK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEJ,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACb,UAAU,EAAEU,eAAe,CAAC,CAAC,CAAC,CAAC;EACnC;;EAEA;EACA;EACA,MAAMQ,WAAW,GAAIX,CAAC,IAAK;IACzB,IAAIY,QAAQ,GAAGjB,KAAK;IACpB,IAAIK,CAAC,CAACa,MAAM,GAAG,CAAC,EAAE;MAChB;MACAD,QAAQ,GAAGE,IAAI,CAACC,GAAG,CAACpB,KAAK,GAAG,GAAG,EAAEG,OAAO,CAAC;IAC3C,CAAC,MAAM;MACL;MACAc,QAAQ,GAAGE,IAAI,CAACE,GAAG,CAACrB,KAAK,GAAG,GAAG,EAAEE,OAAO,CAAC;IAC3C;IAEAD,QAAQ,CAACgB,QAAQ,CAAC;EACpB,CAAC;EACD;AACF;AAAC1B,EAAA,CAtEQD,iBAAiB;AAAAgC,EAAA,GAAjBhC,iBAAiB;AAwE1B,eAAeA,iBAAiB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}